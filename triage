#!/usr/bin/env node

// "requires" used in this file ------------------------------------------------

var path = require('path'), fs = require('fs'), glob = require('glob');
var minimist = require('minimist');
var express = require('express');
var emi = require('express-middleware-image');
var bodyParser = require('body-parser');

var nconf = require('nconf');
var util = require('util');

// First consider commandline arguments and environment variables, respectively.
nconf.argv().env();

// Then load configuration from a designated file.
nconf.file({ file: 'config.json' });

// Parse command line args, if any ---------------------------------------------

var argv = minimist(process.argv.slice(2));

var photosDir = process.cwd();  // by default
if ('photos-dir' in argv) {
    photosDir = argv['photos-dir'];
}

var port = 8123; // by default
if ('p' in argv) {
    port = parseInt(argv['p']);
}

var cacheDir = '/Volumes/Storage/tmp/triage'; // by default
if ('cache-dir' in argv) {
    cacheDir = argv['cache-dir'];
}

// Load photo list -------------------------------------------------------------
var readPhotolist = function(dirname) {
	var jpegs = [];
	var ratingsFilePath = path.join(photosDir, dirname,'ratings.json');
	if ((fs.existsSync(ratingsFilePath)) && !('reset' in argv)) {
	    // Load ratings file if it exists, unless --reset is passed
	    jpegs = require(ratingsFilePath);
	} else {
	    // Start from all zeros, load everything matching .jpg or .jpeg
	    jpegs = glob.sync(
	        path.join(photosDir, dirname, '*.+(jpg|jpeg)'),
	        { nocase: true }
	    ).map(function(fname) {
	        return {
	            fname: fname.split(path.sep).slice(-1)[0],
	            rating: 0
	        };
	    });
	}
	return jpegs;
};


// Save and exit functions -----------------------------------------------------
function save(dirname) {
	if ( ! dirname ) {
		return;
	}
    // write 2-space indented file
    fs.writeFileSync(path.join(photosDir, dirname,'ratings.json'), JSON.stringify(allJpegs[dirname], null, 2));
    console.log('saved');
}

function exit() {
    save();
    process.exit(0);
}
process.on('SIGINT', exit);

function getDirectories(path) {
  return fs.readdirSync(path).filter(function (file) {
    return fs.statSync(path+'/'+file).isDirectory();
  });
};

// Express server --------------------------------------------------------------
var app = express();

// Parse JSON posted to server
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
	extended: true
})); 
const allJpegs = {};

var middlewares = {};

var isActive = null;

app.use('/dir/:dirname/images/*',function(req, res, next) {
	isActive = true;
	isActive = setTimeout(function() {
		tryUnmounting(rescanPhotos);
	},1000*60*30);
	var newurl = req.originalUrl.replace(/.*\/images/,'');
	var urlbits = newurl.split('/');
	urlbits[2] = req.params['dirname']+'/'+urlbits[2];
	req.originalUrl = urlbits.join('/');
	next();
});

app.use(emi({
    root: photosDir,
    cache: cacheDir,
    quality: 60
}));

var rescanPhotos = function() {
	Object.keys(allJpegs).forEach(function(dir) {
		delete allJpegs[dir];
	});
	getDirectories(photosDir).forEach(function(dirname) {
		// Serve smaller images at /h:xxx/filename.jpg
		allJpegs[dirname] = readPhotolist(dirname);
	});	
};


app.get('/',function(req,res) {
	var wol = require('wake_on_lan');
	wol.wake(nconf.get('nas_mac'));
	res.sendFile(path.join(__dirname , 'app','root.html'));
});

app.get('/dirs.json',function(req,res) {
	res.send(Object.keys(allJpegs));
});

// Static server for the angular.js app
app.use('/dir/:dirname/', express.static(path.join(__dirname , 'app')));

// A few URLs for front/back end communications --------------------------------
app.get('/dir/:dirname/photos.json', function(req, res){
  res.send(allJpegs[req.params['dirname']]);
});

app.post('/dir/:dirname/rate', function(req, res) {
    var index = parseInt(req.body.index);
    var rating = parseInt(req.body.rating);
    allJpegs[req.params['dirname']][index].rating = rating;
    res.send({});
});

app.post('/dir/:dirname/rate/reset', function(req, res) {
    for(var index=0; index < allJpegs.length; index++) {
        allJpegs[req.params['dirname']][index].rating = 0;
    }
    res.send({});
});

app.post('/dir/:dirname/save', function(req, res) {
    save(req.params['dirname']);
    res.send({});
});

var casting = require('./triage-cast');

rescanPhotos();

var mount_password = null;

var tryMounting = function(callback) {
	if ( ! mount_password ) {
		callback();
		return;
	}
	require('./osx-mountutils').mount('//'+nconf.get('nas_username')+':'+mount_password+'@'+nconf.get('nas_host')+'/'+nconf.get('nas_path'),nconf.get('nas_mount_path'),{'fstype':'smbfs'},callback);
};

var tryUnmounting = function(callback) {
	mount_password = null;
	require('./osx-mountutils').umount(nconf.get('nas_mount_path'),false,null,callback);
};

app.get('/logout',function(req,res) {
	tryUnmounting(function() {
		res.send({'status' : 'OK'});
		rescanPhotos();
	});
});

app.post('/login',function(req,res) {
	mount_password = req.body['password'];
	tryMounting(function() {
		res.send({"status" : "OK"});
		rescanPhotos();
	});
});

// Fire up the server ----------------------------------------------------------
var server = app.listen(port, function() {
    console.log('Listening on port %d', server.address().port);
});
