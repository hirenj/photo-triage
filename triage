#!/usr/bin/env node

// "requires" used in this file ------------------------------------------------

var path = require('path'), fs = require('fs'), glob = require('glob');
var minimist = require('minimist');
var express = require('express');
var emi = require('express-middleware-image');
var bodyParser = require('body-parser');

// Parse command line args, if any ---------------------------------------------

var argv = minimist(process.argv.slice(2));

var photosDir = process.cwd();  // by default
if ('photos-dir' in argv) {
    photosDir = argv['photos-dir'];
}
var ratingsFilePath = path.join(photosDir, 'ratings.json');

var port = 8123; // by default
if ('p' in argv) {
    port = parseInt(argv['p']);
}

var cacheDir = '/Volumes/Storage/tmp/triage'; // by default
if ('cache-dir' in argv) {
    cacheDir = argv['cache-dir'];
}

// Load photo list -------------------------------------------------------------

var allJpegs = [];
if ((fs.existsSync(ratingsFilePath)) && !('reset' in argv)) {
    // Load ratings file if it exists, unless --reset is passed
    allJpegs = require(ratingsFilePath);

    // If --less-than is passed...
    if ('less-than' in argv) {
        var rewriteRatingsFile = false;

        // ...discard low-rated photos
        allJpegs = allJpegs.filter(function(photo) {
            if (photo.rating < argv['less-than']) {
                
                // output rejected photo's filename
                process.stdout.write(photo.fname + '\n');

                if (argv['_'].indexOf('remove') >= 0) {
                    // If 'remove' is present, then delete photo
                    // and all files with the same base name
                    var extension = path.extname(photo.fname);
                    var remove = photo.fname.replace(extension, '.*');
                    glob.sync(remove, { nocase: true }).map(function(y) {
                        fs.unlinkSync(y);
                        process.stdout.write('  removed ' + y + '\n');
                    });
                    // We'll also need to overwrite the ratings.json file later
                    rewriteRatingsFile = true;
                }
                return false; // discard this photo from allJpegs
            }
            return true; // keep this entry in allJpegs
        });

        if (rewriteRatingsFile) save();
        process.exit(0);
    }
} else {
    // Start from all zeros, load everything matching .jpg or .jpeg
    allJpegs = glob.sync(
        path.join(photosDir, '*.+(jpg|jpeg)'),
        { nocase: true }
    ).map(function(fname) {
        return {
            fname: fname.split(path.sep).slice(-1)[0],
            rating: 0
        };
    });
}

// Save and exit functions -----------------------------------------------------
function save() {
    // write 2-space indented file
    fs.writeFileSync(ratingsFilePath, JSON.stringify(allJpegs, null, 2));
    console.log('saved');
}

function exit() {
    save();
    process.exit(0);
}
process.on('SIGINT', exit);

// Express server --------------------------------------------------------------
var app = express();

// Parse JSON posted to server
app.use(bodyParser.json());

// Serve smaller images at /h:xxx/filename.jpg
app.use(emi({
    root: photosDir,
    cache: cacheDir,
    quality: 60
}));

// Static server for the angular.js app
app.use('/', express.static(path.join(__dirname , 'app')));

// A few URLs for front/back end communications --------------------------------
app.get('/photos.json', function(req, res){
  res.send(allJpegs);
});

app.post('/rate', function(req, res) {
    var index = parseInt(req.body.index);
    var rating = parseInt(req.body.rating);
    allJpegs[index].rating = rating;
    res.send({});
});

app.post('/rate/reset', function(req, res) {
    for(var index=0; index < allJpegs.length; index++) {
        allJpegs[index].rating = 0;
    }
    res.send({});
});

app.post('/save', function(req, res) {
    save();
    res.send({});
});

var casting = require('./triage-cast');

// Fire up the server ----------------------------------------------------------
var server = app.listen(port, function() {
    console.log('Listening on port %d', server.address().port);
});
